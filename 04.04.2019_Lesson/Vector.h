#pragma once //во всех header файлах желательно указывать
#include<iostream>
#include <iomanip>
#include<Windows.h>
#include<ctime>
#include<cstring>
#include<fstream>
using namespace std;

//3. Разработать класс «Вектор», реализующий работу с одномерным динамическим массивом целых чисел.
//Возможности класса – добавление нового значения в конец дин.массива,
//добавление в указанную позицию, удаление из указанной позиции,
//изменение значения в указанной позиции, возврат значения из указанной позиции.
//Необходим ли для класса «Вектор» конструктор копирования ? Деструктор ? Если да – реализуйте.

class Vector {
private:
	// 3 основные свойства динамического массива:
	int *els;
	int cur_size;
	int buf_size;
public:
	//конструктор по умолчанию, значения нулевые
	// NULL псевдоним для нуля
	Vector():els(NULL), cur_size(0), buf_size(0){}

	//параметризованный конструктор у нас будет задавать размер буфера
	Vector(int size);
	Vector(int size, int value);
	// если несколько параметризованных конструкторов, то они должны отличаться параметрами: их количеством или типом

	//конструктор КОПИРОВАНИЯ, т.к. обычный конструктор по умочанию работает с ошибкой, пытаясь в конце программы удалить уже удаленную оригиналом область памяти
	Vector(const Vector& obj); // & - здесь запрещает копирование внутри метода, const - запрещает изменять оригинал
	// он нужен, чтобы у каждого вектора была своя область памяти


	~Vector(); //деструктор - исп вместо delete для удаления динамического массива, вызывается автоматически по завершении программы
	// ~ тильда

	void push_back(int el); //внутренний метод класса Вектор имеет доступ к его приватным свойствам, поэтому сюда передаем только 1 параметр el, а указатель он и так вытащит
	void insert_by_position(int el, int pos);
	void erase_by_position(int pos);
	void edit_by_position(int pos);
	int at(int pos); //returns position of the element at the array
	int size();
	void print();
};